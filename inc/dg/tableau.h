#pragma once

#include <vector>
#include <string>
#include <unordered_map>
#include "topology/operator.h"

namespace dg{


/*! @brief Manage coefficients of a (extended) Butcher tableau
 *
 * The goal of this class is to represent a Butcher tableau for the use
 * in Runge Kutta type time integrators. See
 * https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods
 * for an introduction.
 * The coefficients of the tableau
 * are easily constructible and accessible.
 * Furthermore, we provide utilities like the number of stages, whether the
 * tableau is embedded or not and the order of the method.
 *
 * Currently available are
 *
 * Explicit methods
 * @copydoc hide_explicit_butcher_tableaus
 * Implicit methods
 * @copydoc hide_implicit_butcher_tableaus
 * @tparam real_type type of the coefficients
 * @sa RungeKutta, ERKStep, ARKStep
 * @ingroup time_utils_utils
 */
template<class real_type>
struct ButcherTableau{
    using value_type = real_type;
    ///No memory allocation
    ButcherTableau(){}
    /*! @brief Construct a classic non-embedded tableau
     * @param s number of stages
     * @param order (global) order of the resulting method
     * @param a pointer to s*s real numbers interpreted as a_{ij}=a[i*s+j]
     * @param b pointer to s real numbers interpreted as b_j=b[j]
     * @param c pointer to s real numbers interpreted as c_i=c[i]
     * @note This constructor initializes the embedded coefficients bt=b
     * which makes the embedded method equal to the actual method
     */
    ButcherTableau(unsigned s, unsigned order,
                   const real_type* a , const real_type* b , const real_type* c):
        m_a(a, a+s*s), m_b(b, b+s), m_c(c, c+s), m_bt(b,b+s), m_q(order), m_p(order), m_s(s){}
    /*! @brief Construct an embedded tableau
     *
     * @param s number of stages
     * @param embedded_order (global) order of the embedded method (corresponding to \c bt)
     * @param order (global) order of the method (corresponding to \c b)
     * @param a pointer to s*s real numbers interpreted as a_{ij}=a[i*s+j]
     * @param b pointer to s real numbers interpreted as b_j=b[j]
     * @param bt pointer to s real numbers interpreted as bt_j=bt[j]
     * @param c pointer to s real numbers interpreted as c_i=c[i]
     */
    ButcherTableau(unsigned s, unsigned embedded_order, unsigned order,
               const real_type* a, const real_type* b, const real_type* bt, const real_type* c):
        m_a(a, a+s*s), m_b(b,b+s), m_c(c,c+s), m_bt(bt, bt+s), m_q(order), m_p(embedded_order), m_s(s), m_embedded(true){}
    ///Construct from ARKode standard format
    /*!@brief Construct embedded method from single array
     * @param s number of stages
     * @param data Array of (s+1)*(s+2) real numbers, interpreted as:
     * c[i]=data[i*(s+1)], a_ij=data[i*(s+1)+j+1], order=data[s*(s+1)], b_j=data[s*(s+1)+j+1], embedded_order = data[(s+1)*(s+1)], bt_j=data[(s+1)*(s+1)+j+1]
     */
    ButcherTableau(unsigned s, real_type* data):
        m_a(s), m_b(s), m_c(s), m_bt(s), m_s(s), m_embedded(true)
    {
        for( unsigned i=0; i<s; i++)
        {
            m_c[i] = data[i*(s+1)];
            for( unsigned j=0; j<s; j++)
                m_a(i,j) = data[i*(s+1)+j+1];
        }
        m_q = (unsigned)data[s*(s+1)];
        for( unsigned j=0; j<s; j++)
            m_b[j] = data[s*(s+1)+j+1];
        m_p = (unsigned)data[(s+1)*(s+1)];
        for( unsigned j=0; j<s; j++)
            m_bt[j] = data[(s+1)*(s+1)+j+1];
    }

    /**
    * @brief Read the a_ij coefficients
    * @param i row number 0<=i<s, i>=s results in undefined behaviour
    * @param j col number 0<=j<s, j>=s results in undefined behaviour
    * @return a_ij
    */
    real_type a( unsigned i, unsigned j) const {
        return m_a(i,j);
    }
    /**
    * @brief Read the c_i coefficients
    * @param i row number 0<=i<s, i>=s results in undefined behaviour
    * @return c_i
    */
    real_type c( unsigned i) const {
        return m_c[i];
    }
    /**
    * @brief Read the b_j coefficients
    * @param j col number 0<=j<s, j>=s results in undefined behaviour
    * @return b_j
    */
    real_type b( unsigned j) const {
        return m_b[j];
    }
    /**
    * @brief Read the embedded bt_j coefficients
    * @param j col number 0<=j<s, j>=s results in undefined behaviour
    * @return bt_j
    */
    real_type bt( unsigned j) const {
        return m_bt[j];
    }
    /**
    * @brief Return the coefficients for the error estimate
    * Equivalent to b(j)-bt(j)
    * @param j col number 0<=j<s, j>=s results in undefined behaviour
    * @return b(j)-bt(j)
    */
    real_type d( unsigned j) const {
        return m_b[j] - m_bt[j];
    }
    ///The number of stages s
    unsigned num_stages() const  {
        return m_s;
    }
    ///global order of accuracy for the method represented by b
    unsigned order() const {
        return m_q;
    }
    ///global order of accuracy for the embedded method represented by bt
    unsigned embedded_order() const{
        return m_p;
    }
    ///True if the method has an embedding
    bool isEmbedded()const{
        return m_embedded;
    }
    /// True if an element on or above the diagonal in a is non-zero
    bool isImplicit()const{
        for( unsigned i=0; i<m_s; i++)
            for( unsigned j=i; j<m_s; j++)
                if( a(i,j) != 0)
                    return true;
        return false;
    }
    ///True if the method has the "First Same As Last" property:
    ///the last stage is evaluated at the same point as the first stage of the next step.
    bool isFsal()const{
        if( m_c[m_s-1] != 1)
            return false;
        for (unsigned j=0; j<m_s; j++)
            if( a(m_s-1,j) != b(j) )
                return false;
        return true;
    }
    private:
    dg::Operator<real_type> m_a;
    std::vector<real_type> m_b, m_c, m_bt;
    unsigned m_q, m_p, m_s;
    bool m_embedded = false;
};

/**
 * @brief Manage coefficients in Shu-Osher form
 *
 * Currently only explicit tables that are marked with "Shu-Osher-Form" are available in this form
 * @copydoc hide_explicit_butcher_tableaus
 * @note A Shu-Osher Tableau can be uniquely converted to a ButcherTableau but the converse is not true
 *
 * @tparam real_type type of the coefficients
 * @sa ShuOsher
 * @ingroup time_utils_utils
 */
template<class real_type>
struct ShuOsherTableau
{
    using value_type = real_type;
    ///No memory allocation
    ShuOsherTableau(){}
    /*! @brief Construct a non-embedded explicit tableau
     * @param stages number of stages
     * @param order (global) order of the resulting method
     * @param alpha_v s*s/2 real numbers interpreted as a linearized triangle
     * @param beta_v s*s/2 real numbers interpreted as a linearized triangle
     */
    ShuOsherTableau( unsigned stages, unsigned order, const std::vector<real_type>& alpha_v, const std::vector<real_type>& beta_v){
        // parse the input into matrices
        m_stages = stages;
        m_order = order;
        m_alpha = dg::Operator<real_type>(stages, 0);
        m_beta = dg::Operator<real_type>(stages, 0);
        unsigned j=0;
        for( unsigned i=0; i<stages; i++)
            for( unsigned k=0; k<i+1; k++)
            {
                m_alpha(i,k) = alpha_v[j];
                m_beta(i,k) = beta_v[j];
                j++;
            }
        //std::cout << m_alpha << m_beta;
    }

    /**
     * @brief A Shu-Osher Tableau can be converted to a Butcher table
     *
     * @return the corresponding Butcher Tableau
     */
    operator ButcherTableau<real_type>( )const{
        //the converse is not unique:
        //AN  EXTENSION  AND  ANALYSISOF  THE
        //SHU-OSHER  REPRESENTATIONOF  RUNGE-KUTTA  METHODS
        dg::Operator<real_type> a(m_stages, 0);
        std::vector< real_type > b(m_stages), c(m_stages);
        //convert to Butcher tableau
        for( unsigned i=1; i<m_stages; i++)
        {
            for( unsigned k=0; k<i; k++)
            {
                a( i, k) = m_beta ( i-1, k);
                for( unsigned j = k+1; j<i; j++)
                    a(i,k) += m_alpha( i-1,j)*a(j,k);
            }
        }
        for( unsigned k=0; k<m_stages; k++)
        {
            b[k] = m_beta( m_stages-1, k);
            for( unsigned j=k+1; j<m_stages; j++)
                b[k] += m_alpha(m_stages-1, j)*a( j, k);
        }
        for( unsigned i=0; i<m_stages; i++)
        {
            c[i] = a(i,0);
            for( unsigned k=1; k<m_stages; k++)
                c[i] += a(i,k);
        }
        dg::ButcherTableau<real_type> tableau(m_stages, m_order, &a.data()[0], &b[0], &c[0]);
        return tableau;
    }
    /**
    * @brief Read the alpha_ij coefficients
    * @param i row number 0<=i<s, i>=s results in undefined behaviour
    * @param j col number 0<=j<s, j>=s results in undefined behaviour
    * @return alpha_ij
    */
    real_type alpha( unsigned i, unsigned j){ return m_alpha(i,j);}
    /**
    * @brief Read the beta_ij coefficients
    * @param i row number 0<=i<s, i>=s results in undefined behaviour
    * @param j col number 0<=j<s, j>=s results in undefined behaviour
    * @return beta_ij
    */
    real_type beta( unsigned i, unsigned j){ return m_beta(i,j);}
    ///The number of stages s
    unsigned num_stages() const  {
        return m_stages;
    }
    ///global order of accuracy for the method
    unsigned order() const {
        return m_order;
    }
    private:
    unsigned m_stages, m_order;
    dg::Operator<real_type> m_alpha, m_beta;
};
///@cond
namespace tableau{
///%%%%%%%%%%%%%%%%%%%%%%%%%%%Classic Butcher tables%%%%%%%%%%%%%%%%%%
//https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods
template<class real_type>
ButcherTableau<real_type> explicit_euler_1_1()
{
    real_type a[1] = {0};
    real_type b[1] = {1};
    real_type c[1] = {0};
    return ButcherTableau<real_type>( 1,1, a,b,c);
}
template<class real_type>
ButcherTableau<real_type> midpoint_2_2()
{
    real_type a[4] = {   0, 0,
                       0.5, 0 };
    real_type b[2] = {0., 1.};
    real_type c[2] = {0, 0.5};
    return ButcherTableau<real_type>( 2,2, a,b,c);
}
template<class real_type>
ButcherTableau<real_type> kutta_3_3()
{
    real_type a[9] = {0,0,0,
         .5, 0., 0.,
        -1., 2., 0.};
    real_type b[3] = {1./6., 2./3., 1./6.};
    real_type c[3] = {0, 0.5, 1.};
    return ButcherTableau<real_type>( 3,3, a,b,c);
}
template<class real_type>
ButcherTableau<real_type> classic_4_4()
{
    real_type a[16] = {
        0,0,0,0,
        0.5, 0,0,0,
        0,0.5,0,0,
        0,0,1,0
    };
    real_type b[4] = {1./6., 1./3., 1./3., 1./6.};
    real_type c[4] = {0, 0.5, 0.5, 1.};
    return ButcherTableau<real_type>( 4,4, a,b,c);
}
//From Yoh and Zhong (AIAA 42, 2004)
// !Attention! assumes another form of implementation
//than ARK tableaus
template<class real_type>
ButcherTableau<real_type> sirk3a_ex_3_3()
{
    real_type a[9] = {
        0,0,0,
        8./7., 0,0,
        71./252., 7./36.,0
    };
    real_type b[3] = {1./8., 1./8., 3./4.};
    real_type c[3] = {0, 8./7., 120./252.};
    return ButcherTableau<real_type>( 3,3, a,b,c);
}
template<class real_type>
ButcherTableau<real_type> sirk3a_im_3_3()
{
    real_type a[9] = {
        3./4.,0,0,
        5589./6524., 75./233.,0,
        7691./26096., -26335./78288., 65./168.
    };
    real_type b[3] = {1./8., 1./8., 3./4.};
    real_type c[3] = {3./4., 7689./6524., 27028./78288.};
    return ButcherTableau<real_type>( 3,3, a,b,c);
}

///%%%%%%%%%%%%%%%%%%%%%%%%%%%Embedded Butcher tables%%%%%%%%%%%%%%%%%%
//tables copied from: http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html
template<class real_type>
ButcherTableau<real_type> heun_euler_2_1_2()
{
    real_type a[2*2] = {0,0, 1,0};
    real_type b[2] = {0.5, 0.5};
    real_type bt[2] = {1., 0.};
    real_type c[2] = {0,1};
    return ButcherTableau<real_type>(2,1,2, a, b, bt, c);
}
template<class real_type>
ButcherTableau<real_type> bogacki_shampine_4_2_3()
{
    real_type a[4*4] = {
        0,0,0,0,
        0.5,0,0,0,
        0,0.75,0,0,
        2./9., 1./3., 4./9., 0.};
    real_type b[4] = {2./9., 1./3., 4./9., 0.};
    real_type bt[4] = {7./24., 1./4.,1./3.,1./8.};
    real_type c[4] = {0.,0.5,3./4.,1.};
    return ButcherTableau<real_type>(4,2,3, a, b, bt, c);
}
template<class real_type>
ButcherTableau<real_type> ark324l2sa_erk_4_2_3()
{
    real_type data[5*6] = {
  0, 0, 0, 0, 0,
  1767732205903./2027836641118., 1767732205903./2027836641118., 0, 0, 0,
  3./5., 5535828885825./10492691773637., 788022342437./10882634858940., 0, 0,
  1, 6485989280629./16251701735622., -4246266847089./9704473918619., 10755448449292./10357097424841., 0. ,
  3, 1471266399579./7840856788654., -4482444167858./7529755066697., 11266239266428./11593286722821., 1767732205903./4055673282236.,
  2, 2756255671327./12835298489170., -10771552573575./22201958757719., 9247589265047./10645013368117., 2193209047091./5459859503100.
    };
    return ButcherTableau<real_type>(4,data);
}
template<class real_type>
ButcherTableau<real_type> zonneveld_5_3_4()
{
    real_type data[] = {
    0 , 0 , 0 , 0 , 0 , 0 ,
  1./2. , 1./2. , 0 , 0 , 0 , 0 ,
  1./2. , 0 , 1./2. , 0 , 0 , 0 ,
    1 , 0 , 0 , 1 , 0 , 0 ,
  3./4. , 5./32. , 7./32. , 13./32. , -1./32. , 0 ,
  4 , 1./6. , 1./3. , 1./3. , 1./6. , 0 ,
  3 , -1./2. , 7./3. , 7./3. , 13./6. , -16./3.};
    return ButcherTableau<real_type>(5,data);
}
template<class real_type>
ButcherTableau<real_type> ark436l2sa_erk_6_3_4()
{
    real_type data[] = {
    0 , 0 , 0 , 0 , 0 , 0 , 0 ,
  0.5 , 0.5 , 0 , 0 , 0 , 0 , 0 ,
  83./250. , 13861./62500. , 6889./62500. , 0 , 0 , 0 , 0 ,
  31./50. , -116923316275./2393684061468. , -2731218467317./15368042101831. , 9408046702089./11113171139209. , 0 , 0 , 0 ,
  17./20. , -451086348788./2902428689909. , -2682348792572./7519795681897. , 12662868775082./11960479115383. , 3355817975965./11060851509271. , 0 , 0 ,
  1 , 647845179188./3216320057751. , 73281519250./8382639484533. , 552539513391./3454668386233. , 3354512671639./8306763924573. , 4040./17871. , 0 ,
  4 , 82889./524892. , 0 , 15625./83664. , 69875./102672. , -2260./8211. , 0.25 ,
  3 , 4586570599./29645900160. , 0 , 178811875./945068544. , 814220225./1159782912. , -3700637./11593932. , 61727./225920.
    };
    return ButcherTableau<real_type>(6,data);
}
template<class real_type>
ButcherTableau<real_type> sayfy_aburub_6_3_4()
{
    real_type data[] = {
        0 , 0 , 0 , 0 , 0 , 0 , 0 ,
  1./2. , 1./2. , 0 , 0 , 0 , 0 , 0 ,
  1 , -1 , 2 , 0 , 0 , 0 , 0 ,
  1 , 1./6. , 2./3. , 1./6. , 0 , 0 , 0 ,
  1./2. , 0.137 , 0.226 , 0.137 , 0 , 0 , 0 ,
  1 , 0.452 , -0.904 , -0.548 , 0 , 2 , 0 ,
  4 , 1./6. , 1./3. , 1./12. , 0 , 1./3. , 1./12. ,
  3 , 1./6. , 2./3. , 1./6. , 0 , 0 , 0
    };
    return ButcherTableau<real_type>(6,data);
}
template<class real_type>
ButcherTableau<real_type> cash_karp_6_4_5()
{
    real_type data[] = {0 , 0 , 0 , 0 , 0 , 0 , 0 ,
  1./5. , 1./5. , 0 , 0 , 0 , 0 , 0 ,
  3./10. , 3./40. , 9./40. , 0 , 0 , 0 , 0 ,
  3./5. , 3./10. , -9./10. , 6./5. , 0 , 0 , 0 ,
  1 , -11./54. , 5./2. , -70./27. , 35./27. , 0 , 0 ,
  7./8. , 1631./55296. , 175./512. , 575./13824. , 44275./110592. , 253./4096. , 0 ,
  5 , 37./378. , 0 , 250./621. , 125./594. , 0 , 512./1771. ,
  4 , 2825./27648. , 0 , 18575./48384. , 13525./55296. , 277./14336. , 1./4.
  };
    return ButcherTableau<real_type>(6,data);
}
template<class real_type>
ButcherTableau<real_type> fehlberg_6_4_5()
{
    real_type data[] = {
        0 , 0 , 0 , 0 , 0 , 0 , 0 ,
  1./4. , 1./4. , 0 , 0 , 0 , 0 , 0 ,
  3./8. , 3./32. , 9./32. , 0 , 0 , 0 , 0 ,
  12./13. , 1932./2197. , -7200./2197. , 7296./2197. , 0 , 0 , 0 ,
  1 , 439./216. , -8 , 3680./513. , -845./4104. , 0 , 0 ,
  1./2. , -8./27. , 2 , -3544./2565. , 1859./4104. , -11./40. , 0 ,
  5 , 16./135. , 0 , 6656./12825. , 28561./56430. , -9./50. , 2./55. ,
  4 , 25./216. , 0 , 1408./2565. , 2197./4104. , -1./5. , 0
    };
    return ButcherTableau<real_type>(6,data);
}
template<class real_type>
ButcherTableau<real_type> dormand_prince_7_4_5()
{
    real_type data[] = {
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
  1./5. , 1./5. , 0 , 0 , 0 , 0 , 0 , 0 ,
  3./10. , 3./40. , 9./40. , 0 , 0 , 0 , 0 , 0 ,
  4./5. , 44./45. , -56./15. , 32./9. , 0 , 0 , 0 , 0 ,
  8./9. , 19372./6561. , -25360./2187. , 64448./6561. , -212./729. , 0 , 0 , 0 ,
  1 , 9017./3168. , -355./33. , 46732./5247. , 49./176. , -5103./18656. , 0 , 0 ,
  1 , 35./384. , 0 , 500./1113. , 125./192. , -2187./6784. , 11./84. , 0 ,
  5 , 35./384. , 0 , 500./1113. , 125./192. , -2187./6784. , 11./84. , 0 ,
  4 , 5179./57600. , 0 , 7571./16695. , 393./640. , -92097./339200. , 187./2100. , 1./40.
    };
    return ButcherTableau<real_type>(7,data);
}
template<class real_type>
ButcherTableau<real_type> tsitouras09_7_4_5()
{
    real_type b[7] = {
        0.091937670648056,1.156529958312496,-0.781330409541651,
        0.197624776163019,0.271639883438847,0.063598120979232,0
    };
    real_type bt[7] = {
        0.092167469090589,1.131750860603267,-0.759749304413104,
        0.205573577541223,0.264767065074229,0.040490332103796,1./40.
    };
    real_type c[7] = {
        0., 0.231572163526079, 0.212252555252816,0.596693497318054,
        0.797009955708112,1.,1.
    };
    real_type a[7*7] = {
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,-0.059103796886580,0,0,0,0,0,
        0,4.560080615554683,-4.006458683473722,0,0,0,0,
        0,-2.443935658802774,2.631461258707441,0.524706566208284,0,0,0,
        0,9.516251378071800,-8.467630087008555,-0.987888827522473,0.867009765724064,0,0,
        0,0,0,0,0,0,0
    };
    for( unsigned i=0; i<6; i++)
    {
        real_type tmp=0;
        for( unsigned j=0; j<7; j++)
            tmp += a[i*7+j];
        a[i*7] = c[i] - tmp;
    }
    for( unsigned j=0; j<7; j++)
        a[6*7+j] = b[j];
    return ButcherTableau<real_type>(7,4,5,a,b,bt,c);
}

template<class real_type>
ButcherTableau<real_type> tsitouras11_7_4_5()
{
    real_type b[7] = {
        0.09646076681806523,0.01,0.4798896504144996,
        1.379008574103742,-3.290069515436081,2.324710524099774,0.,
    };
    real_type bt[7] = {
        0.001780011052226,0.000816434459657,-0.007880878010262,0.144711007173263,-0.582357165452555,0.458082105929187,1./66.
    };
    real_type c[7] = {
        0.,0.161,0.327,0.9,0.9800255409045097,1.,1.
    };
    real_type a[7*7] = {
        0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,
        0,0.3354806554923570,0,0,0,0,0,
        0,-6.359448489975075,4.362295432869581,0,0,0,0,
        0,-11.74888356406283,7.495539342889836,-0.09249506636175525,0,0,0,
        0,-12.92096931784711,8.159367898576159,-0.07158497328140100,-0.02826905039406838,0,0,
        0,0,0,0,0,0,0
    };
    for( unsigned i=0; i<6; i++)
    {
        real_type tmp=0;
        for( unsigned j=0; j<7; j++)
            tmp += a[i*7+j];
        a[i*7] = c[i] - tmp;
    }
    for( unsigned j=0; j<7; j++)
        a[6*7+j] = b[j];
    return ButcherTableau<real_type>(7,4,5,a,b,bt,c);
}

template<class real_type>
ButcherTableau<real_type> ark548l2sa_erk_8_4_5()
{
    real_type data[] = {
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
  41./100. , 41./100. , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
  2935347310677./11292855782101. , 367902744464./2072280473677. , 677623207551./8224143866563. , 0 , 0 , 0 , 0 , 0 , 0 ,
  1426016391358./7196633302097. , 1268023523408./10340822734521. , 0 , 1029933939417./13636558850479. , 0 , 0 , 0 , 0 , 0 ,
  92./100. , 14463281900351./6315353703477. , 0 , 66114435211212./5879490589093. , -54053170152839./4284798021562. , 0 , 0 , 0 , 0 ,
  24./100. , 14090043504691./34967701212078. , 0 , 15191511035443./11219624916014. , -18461159152457./12425892160975. , -281667163811./9011619295870. , 0 , 0 , 0 ,
  3./5. , 19230459214898./13134317526959. , 0 , 21275331358303./2942455364971. , -38145345988419./4862620318723. , -1./8. , -1./8. , 0 , 0 ,
  1 , -19977161125411./11928030595625. , 0 , -40795976796054./6384907823539. , 177454434618887./12078138498510. , 782672205425./8267701900261. , -69563011059811./9646580694205. , 7356628210526./4942186776405. , 0 ,
  5 , -872700587467./9133579230613. , 0 , 0 , 22348218063261./9555858737531. , -1143369518992./8141816002931. , -39379526789629./19018526304540. , 32727382324388./42900044865799. , 41./200. ,
  4 , -975461918565./9796059967033. , 0 , 0 , 78070527104295./32432590147079. , -548382580838./3424219808633. , -33438840321285./15594753105479. , 3629800801594./4656183773603. , 4035322873751./18575991585200.
    };
    return ButcherTableau<real_type>( 8, data);
}
template<class real_type>
ButcherTableau<real_type> verner_8_5_6()
{
  //From ARKode docu (seems to be different from Verner1978 paper)
    real_type data[] = {
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
  1./6. , 1./6. , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
  4./15. , 4./75. , 16./75. , 0 , 0 , 0 , 0 , 0 , 0 ,
  2./3. , 5./6. , -8./3. , 5./2. , 0 , 0 , 0 , 0 , 0 ,
  5./6. , -165./64. , 55./6. , -425./64. , 85./96. , 0 , 0 , 0 , 0 ,
  1 , 12./5. , -8 , 4015./612. , -11./36. , 88./255. , 0 , 0 , 0 ,
  1./15. , -8263./15000. , 124./75. , -643./680. , -81./250. , 2484./10625. , 0 , 0 , 0 ,
  1 , 3501./1720. , -300./43. , 297275./52632. , -319./2322. , 24068./84065. , 0 , 3850./26703. , 0 ,
  6 , 3./40. , 0 , 875./2244. , 23./72. , 264./1955. , 0 , 125./11592. , 43./616. ,
  5 , 13./160. , 0 , 2375./5984. , 5./16. , 12./85. , 3./44. , 0 , 0
    };
    return ButcherTableau<real_type>( 8, data);
}
template<class real_type>
ButcherTableau<real_type> fehlberg_13_7_8()
{
    real_type data[] = {
        0,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  2./27.,   2./27., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1./9.,   1./36., 1./12., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1./6.,   1./24., 0, 1./8., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  5./12.,   5./12., 0, -25./16., 25./16., 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1./2.,   1./20., 0, 0, 1./4., 1./5., 0, 0, 0, 0, 0, 0, 0, 0,
  5./6.,   -25./108., 0, 0, 125./108., -65./27., 125./54., 0, 0, 0, 0, 0, 0, 0,
  1./6.,   31./300., 0, 0, 0, 61./225., -2./9., 13./900., 0, 0, 0, 0, 0, 0,
  2./3.,   2, 0, 0, -53./6., 704./45., -107./9., 67./90., 3, 0, 0, 0, 0, 0,
  1./3.,   -91./108., 0, 0, 23./108., -976./135., 311./54., -19./60., 17./6., -1./12., 0, 0, 0, 0,
  1,   2383./4100., 0, 0, -341./164., 4496./1025., -301./82., 2133./4100., 45./82., 45./164., 18./41., 0, 0, 0,
  0,   3./205., 0, 0, 0, 0, -6./41., -3./205., -3./41., 3./41., 6./41., 0, 0, 0,
  1,   -1777./4100., 0, 0, -341./164., 4496./1025., -289./82., 2193./4100., 51./82., 33./164., 12./41., 0, 1, 0,
  8, 0, 0, 0, 0, 0, 34./105., 9./35., 9./35., 9./280., 9./280., 0, 41./840., 41./840. ,
  7, 41./840., 0, 0, 0, 0, 34./105., 9./35., 9./35., 9./280., 9./280., 41./840., 0, 0
    };
    return ButcherTableau<real_type>( 13, data);
}
//http://sce.uhcl.edu/rungekutta/
template<class real_type>
ButcherTableau<real_type> feagin_17_8_10()
{
    real_type a[17*17] = {
0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,
0.100000000000000000000000000000000000000000000000000000000000, 0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,
-0.915176561375291440520015019275342154318951387664369720564660,
 1.45453440217827322805250021715664459117622483736537873607016,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,
0.202259190301118170324681949205488413821477543637878380814562,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.606777570903354510974045847616465241464432630913635142443687,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,
0.184024714708643575149100693471120664216774047979591417844635,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.197966831227192369068141770510388793370637287463360401555746,
-0.0729547847313632629185146671595558023015011608914382961421311,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,
 0.0879007340206681337319777094132125475918886824944548534041378,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.410459702520260645318174895920453426088035325902848695210406,
 0.482713753678866489204726942976896106809132737721421333413261, 0,0,0,0,0, 0,0,0,0,0, 0,0,
 0.0859700504902460302188480225945808401411132615636600222593880,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.330885963040722183948884057658753173648240154838402033448632,
 0.489662957309450192844507011135898201178015478433790097210790,
-0.0731856375070850736789057580558988816340355615025188195854775, 0,0,0,0, 0,0,0,0,0, 0,0,
 0.120930449125333720660378854927668953958938996999703678812621,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.260124675758295622809007617838335174368108756484693361887839,
 0.0325402621549091330158899334391231259332716675992700000776101,
-0.0595780211817361001560122202563305121444953672762930724538856, 0,0,0, 0,0,0,0,0, 0,0,
0.110854379580391483508936171010218441909425780168656559807038,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
-0.0605761488255005587620924953655516875526344415354339234619466,
 0.321763705601778390100898799049878904081404368603077129251110,
 0.510485725608063031577759012285123416744672137031752354067590, 0,0, 0,0,0,0,0, 0,0,
0.112054414752879004829715002761802363003717611158172229329393,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
-0.144942775902865915672349828340980777181668499748506838876185,
-0.333269719096256706589705211415746871709467423992115497968724,
 0.499269229556880061353316843969978567860276816592673201240332,
 0.509504608929686104236098690045386253986643232352989602185060, 0, 0,0,0,0,0, 0,0,
0.113976783964185986138004186736901163890724752541486831640341,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
-0.0768813364203356938586214289120895270821349023390922987406384,
 0.239527360324390649107711455271882373019741311201004119339563,
 0.397774662368094639047830462488952104564716416343454639902613,
 0.0107558956873607455550609147441477450257136782823280838547024,
-0.327769124164018874147061087350233395378262992392394071906457, 0,0,0,0,0, 0,0,
0.0798314528280196046351426864486400322758737630423413945356284,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
-0.0520329686800603076514949887612959068721311443881683526937298,
-0.0576954146168548881732784355283433509066159287152968723021864,
 0.194781915712104164976306262147382871156142921354409364738090,
 0.145384923188325069727524825977071194859203467568236523866582,
-0.0782942710351670777553986729725692447252077047239160551335016,
-0.114503299361098912184303164290554670970133218405658122674674, 0,0,0,0, 0,0,
0.985115610164857280120041500306517278413646677314195559520529,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.330885963040722183948884057658753173648240154838402033448632,
 0.489662957309450192844507011135898201178015478433790097210790,
-1.37896486574843567582112720930751902353904327148559471526397,
-0.861164195027635666673916999665534573351026060987427093314412,
 5.78428813637537220022999785486578436006872789689499172601856,
 3.28807761985103566890460615937314805477268252903342356581925,
-2.38633905093136384013422325215527866148401465975954104585807,
-3.25479342483643918654589367587788726747711504674780680269911,
-2.16343541686422982353954211300054820889678036420109999154887, 0,0,0, 0,0,
0.895080295771632891049613132336585138148156279241561345991710,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.197966831227192369068141770510388793370637287463360401555746,
-0.0729547847313632629185146671595558023015011608914382961421311,
 0.0000000000000000000000000000000000000000000000000000000000000,
-0.851236239662007619739049371445966793289359722875702227166105,
 0.398320112318533301719718614174373643336480918103773904231856,
 3.63937263181035606029412920047090044132027387893977804176229,
 1.54822877039830322365301663075174564919981736348973496313065,
-2.12221714704053716026062427460427261025318461146260124401561,
-1.58350398545326172713384349625753212757269188934434237975291,
-1.71561608285936264922031819751349098912615880827551992973034,
-0.0244036405750127452135415444412216875465593598370910566069132, 0,0, 0,0,
-0.915176561375291440520015019275342154318951387664369720564660,
 1.45453440217827322805250021715664459117622483736537873607016,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
-0.777333643644968233538931228575302137803351053629547286334469,
 0.000000000000000000000000000000000000000000000000000000000000,
-0.0910895662155176069593203555807484200111889091770101799647985,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.0910895662155176069593203555807484200111889091770101799647985,
 0.777333643644968233538931228575302137803351053629547286334469, 0, 0,0,
0.100000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
-0.157178665799771163367058998273128921867183754126709419409654,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.157178665799771163367058998273128921867183754126709419409654, 0,0,
0.181781300700095283888472062582262379650443831463199521664945,
 0.675000000000000000000000000000000000000000000000000000000000,
 0.342758159847189839942220553413850871742338734703958919937260,
 0.000000000000000000000000000000000000000000000000000000000000,
 0.259111214548322744512977076191767379267783684543182428778156,
-0.358278966717952089048961276721979397739750634673268802484271,
-1.04594895940883306095050068756409905131588123172378489286080,
 0.930327845415626983292300564432428777137601651182965794680397,
 1.77950959431708102446142106794824453926275743243327790536000,
 0.100000000000000000000000000000000000000000000000000000000000,
-0.282547569539044081612477785222287276408489375976211189952877,
-0.159327350119972549169261984373485859278031542127551931461821,
-0.145515894647001510860991961081084111308650130578626404945571,
-0.259111214548322744512977076191767379267783684543182428778156,
-0.342758159847189839942220553413850871742338734703958919937260,
-0.675000000000000000000000000000000000000000000000000000000000, 0

    };
    real_type b[17] = {
    0.0333333333333333333333333333333333333333333333333333333333333,
    0.0250000000000000000000000000000000000000000000000000000000000,
    0.0333333333333333333333333333333333333333333333333333333333333,
    0.000000000000000000000000000000000000000000000000000000000000,
    0.0500000000000000000000000000000000000000000000000000000000000,
    0.000000000000000000000000000000000000000000000000000000000000,
    0.0400000000000000000000000000000000000000000000000000000000000,
    0.000000000000000000000000000000000000000000000000000000000000,
    0.189237478148923490158306404106012326238162346948625830327194,
    0.277429188517743176508360262560654340428504319718040836339472,
    0.277429188517743176508360262560654340428504319718040836339472,
    0.189237478148923490158306404106012326238162346948625830327194,
    -0.0400000000000000000000000000000000000000000000000000000000000,
    -0.0500000000000000000000000000000000000000000000000000000000000,
    -0.0333333333333333333333333333333333333333333333333333333333333,
    -0.0250000000000000000000000000000000000000000000000000000000000,
    0.0333333333333333333333333333333333333333333333333333333333333
    };
    real_type bt[17] = {
    0.0333333333333333333333333333333333333333333333333333333333333,
    0.0277777777777777777777777777777777777777777777777777777777777,
    0.0333333333333333333333333333333333333333333333333333333333333,
    0.000000000000000000000000000000000000000000000000000000000000,
    0.0500000000000000000000000000000000000000000000000000000000000,
    0.000000000000000000000000000000000000000000000000000000000000,
    0.0400000000000000000000000000000000000000000000000000000000000,
    0.000000000000000000000000000000000000000000000000000000000000,
    0.189237478148923490158306404106012326238162346948625830327194,
    0.277429188517743176508360262560654340428504319718040836339472,
    0.277429188517743176508360262560654340428504319718040836339472,
    0.189237478148923490158306404106012326238162346948625830327194,
    -0.0400000000000000000000000000000000000000000000000000000000000,
    -0.0500000000000000000000000000000000000000000000000000000000000,
    -0.0333333333333333333333333333333333333333333333333333333333333,
    -0.0277777777777777777777777777777777777777777777777777777777777,
    0.0333333333333333333333333333333333333333333333333333333333333
    };
    real_type c[17] = {
 0.000000000000000000000000000000000000000000000000000000000000,
 0.100000000000000000000000000000000000000000000000000000000000,
 0.539357840802981787532485197881302436857273449701009015505500,
 0.809036761204472681298727796821953655285910174551513523258250,
 0.309036761204472681298727796821953655285910174551513523258250,
 0.981074190219795268254879548310562080489056746118724882027805,
 0.833333333333333333333333333333333333333333333333333333333333,
 0.354017365856802376329264185948796742115824053807373968324184,
 0.882527661964732346425501486979669075182867844268052119663791,
 0.642615758240322548157075497020439535959501736363212695909875,
 0.357384241759677451842924502979560464040498263636787304090125,
 0.117472338035267653574498513020330924817132155731947880336209,
 0.833333333333333333333333333333333333333333333333333333333333,
 0.309036761204472681298727796821953655285910174551513523258250,
 0.539357840802981787532485197881302436857273449701009015505500,
 0.100000000000000000000000000000000000000000000000000000000000,
 1.00000000000000000000000000000000000000000000000000000000000
    };
    return ButcherTableau<real_type>( 17, 8, 10, a, b,bt, c);
}
///%%%%%%%%%%%%%%%%%%%%%%%%%%%Implicit Butcher tables%%%%%%%%%%%%%%%%%%
template<class real_type>
ButcherTableau<real_type> implicit_euler_1_1()
{
    real_type a[1] = {1};
    real_type b[1] = {1};
    real_type c[1] = {1};
    return ButcherTableau<real_type>( 1,1, a,b,c);
}
template<class real_type>
ButcherTableau<real_type> implicit_midpoint_1_2()
{
    real_type a[1] = { 0.5};
    real_type b[1] = { 1.};
    real_type c[1] = { 0.5};
    return ButcherTableau<real_type>( 1,2, a,b,c);
}
template<class real_type>
ButcherTableau<real_type> trapezoidal_2_2()
{
    real_type a[4] = { 0, 0, 0.5, 0.5};
    real_type b[2] = { 0.5, 0.5};
    real_type c[2] = { 0, 1.};
    return ButcherTableau<real_type>( 2,2, a,b,c);
}

template<class real_type>
ButcherTableau<real_type> sdirk_2_1_2()
{
    real_type x = (2.-sqrt(2.))/2.;
    real_type data[] = {
  x , x , 0 ,
  1.-x , 1.-2.*x , x,
  2 , 0.5 , 0.5,
  1 , 1 , 0
    };
    return ButcherTableau<real_type>( 2, data);
}
template<class real_type>
ButcherTableau<real_type> billington_3_3_2()
{
    real_type data[] = {
  0.292893218813 , 0.292893218813 , 0 , 0 ,
  1.091883092037 , 0.798989873223 , 0.292893218813 , 0 ,
  1.292893218813 , 0.740789228841 , 0.259210771159 , 0.292893218813 ,
  2 , 0.740789228840 , 0.259210771159 , 0 ,
  3 , 0.691665115992 , 0.503597029883 , -0.195262145876
    };
    return ButcherTableau<real_type>( 3, data);
}
template<class real_type>
ButcherTableau<real_type> trbdf2_3_3_2()
{
    real_type data[] = {
          0 , 0 , 0 , 0 ,
  2-sqrt(2) , (2-sqrt(2))/2. , (2-sqrt(2))/2. , 0 ,
  1 , sqrt(2)/4. , sqrt(2)/4. , (2-sqrt(2))/2. ,
  2 , sqrt(2)/4. , sqrt(2.)/4. , (2-sqrt(2))/2. ,
  3 , (1-sqrt(2)/4.)/3. , (3*sqrt(2)/4.+1.)/3. , (2-sqrt(2))/6.
    };
    return ButcherTableau<real_type>( 3, data);
}
template<class real_type>
ButcherTableau<real_type> kvaerno_4_2_3()
{
    real_type data[] = {
          0 , 0 , 0 , 0 , 0 ,
  0.871733043 , 0.4358665215 , 0.4358665215 , 0 , 0 ,
  1 , 0.490563388419108 , 0.073570090080892 , 0.4358665215 , 0 ,
  1 , 0.308809969973036 , 1.490563388254106 , -1.235239879727145 , 0.4358665215 ,
  3 , 0.308809969973036 , 1.490563388254106 , -1.235239879727145 , 0.4358665215 ,
  2 , 0.490563388419108 , 0.073570090080892 , 0.4358665215 , 0
    };
    return ButcherTableau<real_type>( 4, data);
}
template<class real_type>
ButcherTableau<real_type> ark324l2sa_dirk_4_2_3()
{
    real_type data[] = {
          0 , 0 , 0 , 0 , 0 ,
  1767732205903./2027836641118. , 1767732205903./4055673282236. , 1767732205903./4055673282236. , 0 , 0 ,
  3./5. , 2746238789719./10658868560708. , -640167445237./6845629431997. , 1767732205903./4055673282236. , 0 ,
  1 , 1471266399579./7840856788654. , -4482444167858./7529755066697. , 11266239266428./11593286722821. , 1767732205903./4055673282236. ,
  3 , 1471266399579./7840856788654. , -4482444167858./7529755066697. , 11266239266428./11593286722821. , 1767732205903./4055673282236. ,
  2 , 2756255671327./12835298489170. , -10771552573575./22201958757719. , 9247589265047./10645013368117. , 2193209047091./5459859503100.
    };
    return ButcherTableau<real_type>( 4, data);
}
template<class real_type>
ButcherTableau<real_type> cash_5_2_4()
{
    real_type data[] = {
          0.435866521508 , 0.435866521508 , 0 , 0 , 0 , 0 ,
  -0.7 , -1.13586652150 , 0.435866521508 , 0 , 0 , 0 ,
  0.8 , 1.08543330679 , -0.721299828287 , 0.435866521508 , 0 , 0 ,
  0.924556761814 , 0.416349501547 , 0.190984004184 , -0.118643265417 , 0.435866521508 , 0 ,
  1 , 0.896869652944 , 0.0182725272734 , -0.0845900310706 , -0.266418670647 , 0.435866521508 ,
  4 , 0.896869652944 , 0.0182725272734 , -0.0845900310706 , -0.266418670647 , 0.435866521508 ,
  2 , 1.05646216107052 , -0.0564621610705236 , 0 , 0 , 0
    };
    return ButcherTableau<real_type>( 5, data);
}
template<class real_type>
ButcherTableau<real_type> cash_5_3_4()
{
    real_type data[] = {
          0.435866521508 , 0.435866521508 , 0 , 0 , 0 , 0 ,
  -0.7 , -1.13586652150 , 0.435866521508 , 0 , 0 , 0 ,
  0.8 , 1.08543330679 , -0.721299828287 , 0.435866521508 , 0 , 0 ,
  0.924556761814 , 0.416349501547 , 0.190984004184 , -0.118643265417 , 0.435866521508 , 0 ,
  1 , 0.896869652944 , 0.0182725272734 , -0.0845900310706 , -0.266418670647 , 0.435866521508 ,
  4 , 0.896869652944 , 0.0182725272734 , -0.0845900310706 , -0.266418670647 , 0.435866521508 ,
  3 , 0.776691932910 , 0.0297472791484 , -0.0267440239074 , 0.220304811849 , 0
    };
    return ButcherTableau<real_type>( 5, data);
}
template<class real_type>
ButcherTableau<real_type> sdirk_5_3_4()
{
    real_type data[] = {
        1./4. , 1./4. , 0 , 0 , 0 , 0 ,
  3./4. , 1./2. , 1./4. , 0 , 0 , 0 ,
  11./20. , 17./50. , -1./25. , 1./4. , 0 , 0 ,
  1./2. , 371./1360. , -137./2720. , 15./544. , 1./4. , 0 ,
  1 , 25./24. , -49./48. , 125./16. , -85./12. , 1./4. ,
  4 , 25./24. , -49./48. , 125./16. , -85./12. , 1./4. ,
  3 , 59./48. , -17./96. , 225./32. , -85./12. , 0
    };
    return ButcherTableau<real_type>( 5, data);
}
template<class real_type>
ButcherTableau<real_type> kvaerno_5_3_4()
{
    real_type data[] = {
        0 , 0 , 0 , 0 , 0 , 0 ,
  0.871733043 , 0.4358665215  , 0.4358665215  , 0 , 0 , 0 ,
  0.468238744853136 , 0.140737774731968 , -0.108365551378832 , 0.4358665215 , 0 , 0 ,
  1 , 0.102399400616089 , -0.376878452267324 , 0.838612530151233 , 0.4358665215 , 0 ,
  1 , 0.157024897860995 , 0.117330441357768 , 0.61667803039168 , -0.326899891110444 , 0.4358665215 ,
  4 , 0.157024897860995 , 0.117330441357768 , 0.61667803039168 , -0.326899891110444 , 0.4358665215 ,
  3 , 0.102399400616089 , -0.376878452267324 , 0.838612530151233 , 0.4358665215 , 0
    };
    return ButcherTableau<real_type>( 5, data);
}
template<class real_type>
ButcherTableau<real_type> ark436l2sa_dirk_6_3_4()
{
    real_type data[] = {
        0 , 0 , 0 , 0 , 0 , 0 , 0 ,
  1./2. , 1./4. , 1./4. , 0 , 0 , 0 , 0 ,
  83./250. , 8611./62500. , -1743./31250. , 1./4. , 0 , 0 , 0 ,
  31./50. , 5012029./34652500. , -654441./2922500. , 174375./388108. , 1./4. , 0 , 0 ,
  17./20. , 15267082809./155376265600. , -71443401./120774400. , 730878875./902184768. , 2285395./8070912. , 1./4. , 0 ,
  1 , 82889./524892. , 0 , 15625./83664. , 69875./102672. , -2260./8211. , 1./4. ,
  4 , 82889./524892. , 0 , 15625./83664. , 69875./102672. , -2260./8211. , 1./4. ,
  3 , 4586570599./29645900160. , 0 , 178811875./945068544. , 814220225./1159782912. , -3700637./11593932. , 61727./225920.
    };
    return ButcherTableau<real_type>( 6, data);
}
template<class real_type>
ButcherTableau<real_type> kvaerno_7_4_5()
{
    real_type data[] = {
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
  0.52 , 0.26 , 0.26 , 0 , 0 , 0 , 0 , 0 ,
  1.230333209967908 , 0.13 , 0.84033320996790809 , 0.26 , 0 , 0 , 0 , 0 ,
  0.895765984350076 , 0.22371961478320505 , 0.47675532319799699 , -0.06470895363112615 , 0.26 , 0 , 0 , 0 ,
  0.436393609858648 , 0.16648564323248321 , 0.10450018841591720 , 0.03631482272098715 , -0.13090704451073998 , 0.26 , 0 , 0 ,
  1 , 0.13855640231268224 , 0 , -0.04245337201752043 , 0.02446657898003141 , 0.61943039072480676 , 0.26 , 0 ,
  1 , 0.13659751177640291 , 0 , -0.05496908796538376 , -0.04118626728321046 , 0.62993304899016403 , 0.06962479448202728 , 0.26 ,
  5 , 0.13659751177640291 , 0 , -0.05496908796538376 , -0.04118626728321046 , 0.62993304899016403 , 0.06962479448202728 , 0.26 ,
  4 , 0.13855640231268224 , 0 , -0.04245337201752043 , 0.02446657898003141 , 0.61943039072480676 , 0.26 , 0
    };
    return ButcherTableau<real_type>( 7, data);
}
template<class real_type>
ButcherTableau<real_type> ark548l2sa_dirk_8_4_5()
{
    real_type data[] = {
        0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,
  41./100. , 41./200. , 41./200. , 0 , 0 , 0 , 0 , 0 , 0 ,
  2935347310677./11292855782101. , 41./400. , -567603406766./11931857230679. , 41./200. , 0 , 0 , 0 , 0 , 0 ,
  1426016391358./7196633302097. , 683785636431./9252920307686. , 0 , -110385047103./1367015193373. , 41./200. , 0 , 0 , 0 , 0 ,
  92./100. , 3016520224154./10081342136671. , 0 , 30586259806659./12414158314087. , -22760509404356./11113319521817. , 41./200. , 0 , 0 , 0 ,
  24./100. , 218866479029./1489978393911. , 0 , 638256894668./5436446318841. , -1179710474555./5321154724896. , -60928119172./8023461067671. , 41./200. , 0 , 0 ,
  3./5. , 1020004230633./5715676835656. , 0 , 25762820946817./25263940353407. , -2161375909145./9755907335909. , -211217309593./5846859502534. , -4269925059573./7827059040749. , 41./200. , 0 ,
  1 , -872700587467./9133579230613. , 0 , 0 , 22348218063261./9555858737531. , -1143369518992./8141816002931. , -39379526789629./19018526304540. , 32727382324388./42900044865799. , 41./200. ,
  5 , -872700587467./9133579230613. , 0 , 0 , 22348218063261./9555858737531. , -1143369518992./8141816002931. , -39379526789629./19018526304540. , 32727382324388./42900044865799. , 41./200. ,
  4 , -975461918565./9796059967033. , 0 , 0 , 78070527104295./32432590147079. , -548382580838./3424219808633. , -33438840321285./15594753105479. , 3629800801594./4656183773603. , 4035322873751./18575991585200.
    };
    return ButcherTableau<real_type>( 8, data);
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
////                Shu-Osher form of RK methods                           ////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// Convert between Shu-Osher representation to a Butcher tableau
template<class real_type>
dg::ButcherTableau<real_type> shuosher2butcher( unsigned stages, unsigned order, std::vector<real_type> alpha_v, std::vector<real_type> beta_v)
{
    ShuOsherTableau<real_type> shu( stages, order, alpha_v, beta_v);
    return dg::ButcherTableau<real_type>(shu);
}

template<class real_type>
ShuOsherTableau<real_type> ssprk_2_2()
{
    unsigned stages=2, order = 2;
    std::vector<double> alpha_v = {1., 0.5, 0.5};
    std::vector<double> beta_v = {1., 0., 0.5};
    return ShuOsherTableau<real_type>( stages, order, alpha_v, beta_v);
}
template<class real_type>
ShuOsherTableau<real_type> ssprk_3_2()
{
    //CFLL = 2 -> eff = 0.66
    unsigned stages=3, order = 2;
    std::vector<double> alpha_v = {1., 0, 1., 1./3., 0, 2./3.};
    std::vector<double> beta_v = {0.5, 0., 0.5, 0., 0., 1./3.};
    return ShuOsherTableau<real_type>( stages, order, alpha_v, beta_v);
}
template<class real_type>
ShuOsherTableau<real_type> ssprk_3_3()
{
    //CFL = 1 -> eff = 0.33
    unsigned stages=3, order = 3;
    std::vector<double> alpha_v = {1.,3./4.,1./4.,1./3.,0.,2./3.};
    std::vector<double> beta_v = {1., 0., 1./4.,0.,0.,2./3.};
    return ShuOsherTableau<real_type>( stages, order, alpha_v, beta_v);
}
template<class real_type>
ShuOsherTableau<real_type> ssprk_5_3()
{
    //Ruuth 2005
    //CFL = 2.6 -> eff = 0.5
    unsigned stages=5, order = 3;
    std::vector<double> alpha_v = {
        1, 0, 1, 0.56656131914033, 0, 0.43343868085967, 0.09299483444413, 0.00002090369620, 0, 0.90698426185967, 0.00736132260920, 0.20127980325145, 0.00182955389682, 0, 0.78952932024253
    };
    std::vector<double> beta_v = {
        0.37726891511710, 0, 0.37726891511710, 0, 0, 0.16352294089771, 0.00071997378654, 0, 0, 0.34217696850008, 0.00277719819460, 0.00001567934613, 0, 0, 0.29786487010104
    };
    return ShuOsherTableau<real_type>( stages, order, alpha_v, beta_v);
}

template<class real_type>
ShuOsherTableau<real_type> ssprk_5_4()
{
    //Spiteri & Ruuth 2005
    //CLM = 1.5 -> eff = 0.37 , better than 3_3
    unsigned stages=5, order = 4;
    std::vector<double> alpha_v = {
        1, 0.44437049406734, 0.55562950593266, 0.62010185138540, 0, 0.37989814861460, 0.17807995410773, 0, 0, 0.82192004589227, 0.00683325884039, 0, 0.51723167208978, 0.12759831133288, 0.34833675773694
    };
    std::vector<double> beta_v = {
        0.39175222700392, 0, 0.36841059262959, 0, 0, 0.25189177424738, 0, 0, 0, 0.54497475021237, 0, 0, 0, 0.08460416338212, 0.22600748319395
    };
    return ShuOsherTableau<real_type>( stages, order, alpha_v, beta_v);
}


}//namespace tableau
///@endcond

/**
* @brief Identifiers for Butcher Tableaus
*
* We follow the naming convention of the ARKode library http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html (They also provide nice stability plots for their methods)
* as NAME-S-P-Q or NAME-S-Q, where
*  - NAME is the author or name of the method
*  - S is the number of stages in the method
*  - P is the global order of the embedding
*  - Q is the global order of the method
*
*  @note In some of the links below you might want to use the search function of your browser to find the indicated method
*  @ingroup time_utils
*/
enum tableau_identifier{
    EXPLICIT_EULER_1_1, //!< <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">Euler</a>
    MIDPOINT_2_2, //!< <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">Midpoint-2-2</a>
    KUTTA_3_3,//!< <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">Kutta-3-3</a>
    CLASSIC_4_4,//!< <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">Runge-Kutta-4-4</a>
    //ARKode tableaus
    HEUN_EULER_2_1_2,//!< <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">Heun-Euler-2-1-2</a>
    BOGACKI_SHAMPINE_4_2_3,//!< <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">Bogacki-Shampine-4-2-3</a>
    ARK324L2SA_ERK_4_2_3,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">ARK-4-2-3 (explicit)</a>
    ZONNEVELD_5_3_4,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Zonneveld-5-3-4</a>
    ARK436L2SA_ERK_6_3_4,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">ARK-6-3-4 (explicit)</a>
    SAYFY_ABURUB_6_3_4,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Sayfy-Aburub-6-3-4</a>
    CASH_KARP_6_4_5,//!< <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">Cash-Karp-6-4-5</a>
    FEHLBERG_6_4_5,//!< <a href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta%E2%80%93Fehlberg_method">Fehlberg-6-4-5</a>
    DORMAND_PRINCE_7_4_5,//!< <a href="https://en.wikipedia.org/wiki/Dormand%E2%80%93Prince_method">Dormand-Prince-7-4-5</a>
    TSITOURAS09_7_4_5,//!< <a href="https://doi.org/10.1063/1.3241561">Tsitouras 5(4) method from 2009</a> (fsal), The default method in Julia
    TSITOURAS11_7_4_5,//!< <a href="https://doi.org/10.1016/j.camwa.2011.06.002">Tsitouras 5(4) method from 2011</a> (fsal), Further improves Tsitouras09
    ARK548L2SA_ERK_8_4_5,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">ARK-8-4-5 (explicit)</a>
    VERNER_8_5_6,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Verner-8-5-6</a>
    FEHLBERG_13_7_8,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Fehlberg-13-7-8</a>
    //high order feagin
    FEAGIN_17_8_10,//!< <a href="http://sce.uhcl.edu/rungekutta/">Feagin-17-8-10</a>
    //implicit ARKode tableaus
    IMPLICIT_EULER_1_1,//!< <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">Euler (implicit)</a>
    IMPLICIT_MIDPOINT_1_2, //!<  <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">implicit Midpoint</a>
    TRAPEZOIDAL_2_2,//!<  <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">Crank-Nicolson method</a>
    SDIRK_2_1_2, //!<  <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">generic 2nd order A and L-stable</a>
    BILLINGTON_3_3_2,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Billington-3-3-2</a>
    TRBDF2_3_3_2,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">TRBDF2-3-3-2</a>
    KVAERNO_4_2_3,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Kvaerno-4-2-3</a>
    ARK324L2SA_DIRK_4_2_3,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">ARK-4-2-3 (implicit)</a>
    CASH_5_2_4,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Cash-5-2-4</a>
    CASH_5_3_4,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Cash-5-3-4</a>
    SDIRK_5_3_4,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">SDIRK-5-3-4</a>
    KVAERNO_5_3_4,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Kvaerno-5-3-4</a>
    ARK436L2SA_DIRK_6_3_4,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">ARK-6-3-4 (implicit)</a>
    KVAERNO_7_4_5,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Kvaerno-7-4-5</a>
    ARK548L2SA_DIRK_8_4_5,//!< <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">ARK-8-4-5 (implicit)</a>
    // SSP RK tableaus
    SSPRK_2_2, //!< <a href="https://epubs.siam.org/doi/pdf/10.1137/S0036142901389025">SSPRK</a> "Shu-Osher-Form"
    SSPRK_3_2, //!< <a href="https://epubs.siam.org/doi/pdf/10.1137/S0036142901389025">SSPRK</a> "Shu-Osher-Form"
    SSPRK_3_3, //!< <a href="https://epubs.siam.org/doi/pdf/10.1137/S0036142901389025">SSPRK</a> "Shu-Osher-Form"
    SSPRK_5_3, //!< <a href="https://epubs.siam.org/doi/pdf/10.1137/S0036142901389025">SSPRK</a> "Shu-Osher-Form"
    SSPRK_5_4 //!< <a href="https://epubs.siam.org/doi/pdf/10.1137/S0036142901389025">SSPRK</a> "Shu-Osher-Form"
};

///@cond
namespace create{

static std::unordered_map<std::string, enum tableau_identifier> str2id{
    //Explicit methods
    {"Euler", EXPLICIT_EULER_1_1},
    {"Midpoint-2-2", MIDPOINT_2_2},
    {"Kutta-3-3", KUTTA_3_3},
    {"Runge-Kutta-4-4", CLASSIC_4_4},
    //Embedded explicit methods
    {"Heun-Euler-2-1-2", HEUN_EULER_2_1_2},
    {"Bogacki-Shampine-4-2-3", BOGACKI_SHAMPINE_4_2_3},
    {"ARK-4-2-3 (explicit)", ARK324L2SA_ERK_4_2_3},
    {"Zonneveld-5-3-4", ZONNEVELD_5_3_4},
    {"ARK-6-3-4 (explicit)", ARK436L2SA_ERK_6_3_4},
    {"Sayfy-Aburub-6-3-4", SAYFY_ABURUB_6_3_4},
    {"Cash-Karp-6-4-5", CASH_KARP_6_4_5},
    {"Fehlberg-6-4-5", FEHLBERG_6_4_5},
    {"Dormand-Prince-7-4-5", DORMAND_PRINCE_7_4_5},
    {"Tsitouras09-7-4-5", TSITOURAS09_7_4_5},
    {"Tsitouras11-7-4-5", TSITOURAS11_7_4_5},
    {"ARK-8-4-5 (explicit)", ARK548L2SA_ERK_8_4_5},
    {"Verner-8-5-6", VERNER_8_5_6},
    {"Fehlberg-13-7-8", FEHLBERG_13_7_8},
    {"Feagin-17-8-10", FEAGIN_17_8_10},
    //Implicit methods
    {"Euler (implicit)", IMPLICIT_EULER_1_1},
    {"Midpoint (implicit)", IMPLICIT_MIDPOINT_1_2},
    {"Trapezoidal-2-2", TRAPEZOIDAL_2_2},
    {"SDIRK-2-1-2", SDIRK_2_1_2},
    {"Billington-3-3-2", BILLINGTON_3_3_2},
    {"TRBDF2-3-3-2", TRBDF2_3_3_2},
    {"Kvaerno-4-2-3", KVAERNO_4_2_3},
    {"ARK-4-2-3 (implicit)", ARK324L2SA_DIRK_4_2_3},
    {"Cash-5-2-4", CASH_5_2_4},
    {"Cash-5-3-4", CASH_5_3_4},
    {"SDIRK-5-3-4", SDIRK_5_3_4},
    {"Kvaerno-5-3-4", KVAERNO_5_3_4},
    {"ARK-6-3-4 (implicit)", ARK436L2SA_DIRK_6_3_4},
    {"Kvaerno-7-4-5", KVAERNO_7_4_5},
    {"ARK-8-4-5 (implicit)", ARK548L2SA_DIRK_8_4_5},
    //Shu-Osher methods
    {"SSPRK-2-2", SSPRK_2_2},
    {"SSPRK-3-2", SSPRK_3_2},
    {"SSPRK-3-3", SSPRK_3_3},
    {"SSPRK-5-3", SSPRK_5_3},
    {"SSPRK-5-4", SSPRK_5_4},
};
static inline enum tableau_identifier str2tableau( std::string name)
{
    if( str2id.find(name) == str2id.end())
        throw dg::Error(dg::Message(_ping_)<<"Tableau "<<name<<" not found!");
    else
        return str2id[name];
}
static inline std::string tableau2str( enum tableau_identifier id)
{
    for( auto name: str2id)
    {
        if( name.second == id)
            return name.first;
    }
    throw dg::Error(dg::Message(_ping_)<<"Tableau conversion failed!");
}

template<class real_type>
ShuOsherTableau<real_type> shuosher_tableau( enum tableau_identifier id)
{
    switch(id)
    {
        case SSPRK_2_2:
            return dg::tableau::ssprk_2_2<real_type>();
        case SSPRK_3_2:
            return dg::tableau::ssprk_3_2<real_type>();
        case SSPRK_3_3:
            return dg::tableau::ssprk_3_3<real_type>();
        case SSPRK_5_3:
            return dg::tableau::ssprk_5_3<real_type>();
        case SSPRK_5_4:
            return dg::tableau::ssprk_5_4<real_type>();
        default:
            throw dg::Error(dg::Message(_ping_)<<"Tableau "<<tableau2str(id)<<" is not in Shu-Osher form!");
    }
    return ShuOsherTableau<real_type>(); //avoid compiler warning
}
template<class real_type>
ButcherTableau<real_type> tableau( enum tableau_identifier id)
{
    switch(id){
        case EXPLICIT_EULER_1_1:
            return dg::tableau::explicit_euler_1_1<real_type>();
        case MIDPOINT_2_2:
            return dg::tableau::midpoint_2_2<real_type>();
        case KUTTA_3_3:
            return dg::tableau::kutta_3_3<real_type>();
        case CLASSIC_4_4:
            return dg::tableau::classic_4_4<real_type>();
        case HEUN_EULER_2_1_2:
            return dg::tableau::heun_euler_2_1_2<real_type>();
        case BOGACKI_SHAMPINE_4_2_3:
            return dg::tableau::bogacki_shampine_4_2_3<real_type>();
        case ARK324L2SA_ERK_4_2_3:
            return dg::tableau::ark324l2sa_erk_4_2_3<real_type>();
        case ZONNEVELD_5_3_4:
            return dg::tableau::zonneveld_5_3_4<real_type>();
        case ARK436L2SA_ERK_6_3_4:
            return dg::tableau::ark436l2sa_erk_6_3_4<real_type>();
        case SAYFY_ABURUB_6_3_4:
            return dg::tableau::sayfy_aburub_6_3_4<real_type>();
        case CASH_KARP_6_4_5:
            return dg::tableau::cash_karp_6_4_5<real_type>();
        case FEHLBERG_6_4_5:
            return dg::tableau::fehlberg_6_4_5<real_type>();
        case DORMAND_PRINCE_7_4_5:
            return dg::tableau::dormand_prince_7_4_5<real_type>();
        case TSITOURAS09_7_4_5:
            return dg::tableau::tsitouras09_7_4_5<real_type>();
        case TSITOURAS11_7_4_5:
            return dg::tableau::tsitouras11_7_4_5<real_type>();
        case ARK548L2SA_ERK_8_4_5:
            return dg::tableau::ark548l2sa_erk_8_4_5<real_type>();
        case VERNER_8_5_6:
            return dg::tableau::verner_8_5_6<real_type>();
        case FEHLBERG_13_7_8:
            return dg::tableau::fehlberg_13_7_8<real_type>();
        case FEAGIN_17_8_10:
            return dg::tableau::feagin_17_8_10<real_type>();
        case IMPLICIT_EULER_1_1:
            return dg::tableau::implicit_euler_1_1<real_type>();
        case IMPLICIT_MIDPOINT_1_2:
            return dg::tableau::implicit_midpoint_1_2<real_type>();
        case TRAPEZOIDAL_2_2:
            return dg::tableau::trapezoidal_2_2<real_type>();
        case SDIRK_2_1_2:
            return dg::tableau::sdirk_2_1_2<real_type>();
        case BILLINGTON_3_3_2:
            return dg::tableau::billington_3_3_2<real_type>();
        case TRBDF2_3_3_2:
            return dg::tableau::trbdf2_3_3_2<real_type>();
        case KVAERNO_4_2_3:
            return dg::tableau::kvaerno_4_2_3<real_type>();
        case ARK324L2SA_DIRK_4_2_3:
            return dg::tableau::ark324l2sa_dirk_4_2_3<real_type>();
        case CASH_5_2_4:
            return dg::tableau::cash_5_2_4<real_type>();
        case CASH_5_3_4:
            return dg::tableau::cash_5_3_4<real_type>();
        case SDIRK_5_3_4:
            return dg::tableau::sdirk_5_3_4<real_type>();
        case KVAERNO_5_3_4:
            return dg::tableau::kvaerno_5_3_4<real_type>();
        case ARK436L2SA_DIRK_6_3_4:
            return dg::tableau::ark436l2sa_dirk_6_3_4<real_type>();
        case KVAERNO_7_4_5:
            return dg::tableau::kvaerno_7_4_5<real_type>();
        case ARK548L2SA_DIRK_8_4_5:
            return dg::tableau::ark548l2sa_dirk_8_4_5<real_type>();
        default:
            return ButcherTableau<real_type>(shuosher_tableau<real_type>(id));
    }
    return ButcherTableau<real_type>(); //avoid compiler warning
}


template<class real_type>
ShuOsherTableau<real_type> shuosher_tableau( std::string name)
{
        return shuosher_tableau<real_type>( str2tableau(name));
}
template<class real_type>
ButcherTableau<real_type> tableau( std::string name)
{
        return tableau<real_type>( str2tableau(name));
}

}//namespace create
///@endcond

/*! @class hide_explicit_butcher_tableaus
 *
 *    Name  | Identifier | Description
 *   -------|------------| -----------
 *   Euler                  | dg::EXPLICIT_EULER_1_1     | <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">Explicit Euler</a>
 *   Midpoint-2-2           | dg::MIDPOINT_2_2           | <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">Midpoint method</a>
 *   Kutta-3-3              | dg::KUTTA_3_3              | <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">Kutta-3-3</a>
 *   Runge-Kutta-4-4        | dg::CLASSIC_4_4            | <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">"The" Runge-Kutta method</a>
 *   SSPRK-2-2              | dg::SSPRK_2_2                  | <a href="https://epubs.siam.org/doi/pdf/10.1137/S0036142901389025">SSPRK (2,2)</a> CFL_eff = 0.5 "Shu-Osher-Form"
 *   SSPRK-3-2              | dg::SSPRK_3_2                  | <a href="https://epubs.siam.org/doi/pdf/10.1137/S0036142901389025">SSPRK (3,2)</a> CFL_eff = 0.66 "Shu-Osher-Form"
 *   SSPRK-3-3              | dg::SSPRK_3_3                  | <a href="https://epubs.siam.org/doi/pdf/10.1137/S0036142901389025">SSPRK (3,3)</a> CFL_eff = 0.33 "Shu-Osher-Form"
 *   SSPRK-5-3              | dg::SSPRK_5_3                  | <a href="https://epubs.siam.org/doi/pdf/10.1137/S0036142901389025">SSPRK (5,3)</a> CFL_eff = 0.5 "Shu-Osher-Form"
 *   SSPRK-5-4              | dg::SSPRK_5_4                  | <a href="https://epubs.siam.org/doi/pdf/10.1137/S0036142901389025">SSPRK (5,4)</a> CFL_eff = 0.37 "Shu-Osher-Form"
 *   Heun-Euler-2-1-2       | dg::HEUN_EULER_2_1_2       | <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">Heun-Euler-2-1-2</a>
 *   Bogacki-Shampine-4-2-3 | dg::BOGACKI_SHAMPINE_4_2_3 | <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">Bogacki-Shampine</a> (fsal)
 *   ARK-4-2-3 (explicit)   | dg::ARK324L2SA_ERK_4_2_3   | <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">ARK-4-2-3 (explicit)</a>
 *   Zonneveld-5-3-4        | dg::ZONNEVELD_5_3_4        | <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Zonneveld-5-3-4</a>
 *   ARK-6-3-4 (explicit)   | dg::ARK436L2SA_ERK_6_3_4   | <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">ARK-6-3-4 (explicit)</a>
 *   Sayfy_Aburub-6-3-4     | dg::SAYFY_ABURUB_6_3_4     | <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Sayfy_Aburub_6_3_4</a>
 *   Cash_Karp-6-4-5        | dg::CASH_KARP_6_4_5        | <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">Cash-Karp</a>
 *   Fehlberg-6-4-5         | dg::FEHLBERG_6_4_5         | <a href="https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta%E2%80%93Fehlberg_method">Runge-Kutta-Fehlberg</a>
 *   Dormand-Prince-7-4-5   | dg::DORMAND_PRINCE_7_4_5   | <a href="https://en.wikipedia.org/wiki/Dormand%E2%80%93Prince_method">Dormand-Prince method</a> (fsal)
 *   Tsitouras09-7-4-5   | dg::TSITOURAS09_7_4_5   | <a href="https://doi.org/10.1063/1.3241561">Tsitouras 5(4) method from 2009</a> (fsal), The default method in Julia
 *   Tsitouras11-7-4-5   | dg::TSITOURAS11_7_4_5   | <a href="https://doi.org/10.1016/j.camwa.2011.06.002">Tsitouras 5(4) method from 2011</a> (fsal) Further improves Tsitouras09
 *   ARK-8-4-5 (explicit)   | dg::ARK548L2SA_ERK_8_4_5   | <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">ARK-4-2-3 (explicit)</a>
 *   Verner-8-5-6           | dg::VERNER_8_5_6           | <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Verner-8-5-6</a>
 *   Fehlberg-13-7-8        | dg::FEHLBERG_13_7_8        | <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Fehlberg-13-7-8</a>
 *   Feagin-17-8-10         | dg::FEAGIN_17_8_10         | <a href="http://sce.uhcl.edu/rungekutta/">Feagin</a> (The RK10(8) method)
 *
 */

/*! @class hide_implicit_butcher_tableaus
 *
 *    Name  | Identifier | Description
 *   -------|------------| -----------
 *   Euler (implicit)     | dg::IMPLICIT_EULER_1_1     |  <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">backward Euler</a>
 *   Midpoint (implicit)     | dg::IMPLICIT_MIDPOINT_1_2     |  <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">implicit Midpoint</a>
 *   Trapezoidal-2-2     | dg::TRAPEZOIDAL_2_2     |  <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">Crank-Nicolson method</a>
 *   SDIRK-2-1-2          | dg::SDIRK_2_1_2            | <a href="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods">generic 2nd order A and L-stable</a>
 *   Billington-3-3-2     | dg::BILLINGTON_3_3_2       |  <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Billington-3-3-2</a>
 *   TRBDF2-3-3-2         | dg::TRBDF2_3_3_2           |  <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">TRBDF2-3-3-2</a>
 *   Kvaerno-4-2-3        | dg::KVAERNO_4_2_3          |  <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Kvaerno-4-2-3</a>
 *   ARK-4-2-3 (implicit) | dg::ARK324L2SA_DIRK_4_2_3  |  <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">ARK-4-2-3 (implicit)</a>
 *   Cash-5-2-4           | dg::CASH_5_2_4             |  <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Cash-5-2-4</a>
 *   Cash-5-3-4           | dg::CASH_5_3_4             |  <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Cash-5-3-4</a>
 *   SDIRK-5-3-4          | dg::SDIRK_5_3_4            |  <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">SDIRK-5-3-4</a>
 *   Kvaerno-5-3-4        | dg::KVAERNO_5_3_4          |  <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Kvaerno-5-3-4</a>
 *   ARK-6-3-4 (implicit) | dg::ARK436L2SA_DIRK_6_3_4  |  <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">ARK-6-3-4 (implicit)</a>
 *   Kvaerno-7-4-5        | dg::KVAERNO_7_4_5          |  <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">Kvaerno-7-4-5</a>
 *   ARK-8-4-5 (implicit) | dg::ARK548L2SA_DIRK_8_4_5  |  <a href="http://runge.math.smu.edu/arkode_dev/doc/guide/build/html/Butcher.html">ARK-8-4-5 (implicit)</a>
 *
*/

/*! @brief Convert identifiers to their corresponding \c dg::ButcherTableau
 *
 * This is a helper class to simplify the interfaces of our timestepper functions and classes.
 * The sole purpose is to implicitly convert either a ButcherTableau or one of
 * the following identifiers to an instance of a ButcherTableau.
 *
 * Explicit methods
 * @copydoc hide_explicit_butcher_tableaus
 * Implicit methods
 * @copydoc hide_implicit_butcher_tableaus
 * @param real_type The type of the coefficients in the ButcherTableau
 * @ingroup time_utils
 */
template<class real_type>
struct ConvertsToButcherTableau
{
    using value_type = real_type;
    ///Of course a ButcherTableau converts to a ButcherTableau
    ///Useful if you constructed your very own coefficients
    ConvertsToButcherTableau( ButcherTableau<real_type> tableau): m_t(tableau){}

    /*! @brief Create ButcherTableau from \c dg::tableau_identifier
    *
    * The use of this constructor might be a bit awkward because you'll have to write all caps.
    * @param id the identifier, for example \c dg::DORMAND_PRINCE_7_4_5
    */
    ConvertsToButcherTableau( enum tableau_identifier id):m_t( dg::create::tableau<real_type>(id)){}
    /*! @brief Create ButcherTableau from its name (very useful)
    *
    *  @note In some of the links in the Description below you might want to use the search function of your browser to find the indicated method
    *
    * Explicit methods
    * @copydoc hide_explicit_butcher_tableaus
    * Implicit methods
    * @copydoc hide_implicit_butcher_tableaus
    * @param name The name of the tableau as stated in the Name column above, as a string, for example "Dormand-Prince-7-4-5"
    */
    ConvertsToButcherTableau( std::string name):m_t( dg::create::tableau<real_type>(name)){}
    ///@copydoc ConvertsToButcherTableau(std::string)
    ConvertsToButcherTableau( const char* name):m_t( dg::create::tableau<real_type>(std::string(name))){}
    ///Convert to ButcherTableau
    ///
    ///which means an object can be directly assigned to a ButcherTableau
    operator ButcherTableau<real_type>( )const{
        return m_t;
    }
    private:
    ButcherTableau<real_type> m_t;
};

/*! @brief Convert identifiers to their corresponding \c dg::ShuOsherTableau
 *
 * This is a helper class to simplify the interfaces of our timestepper functions and classes.
 * The sole purpose is to implicitly convert either a ShuOsherTableau or one of
 * the following identifiers to an instance of a ShuOsherTableau.
 *
 * Explicit methods (the ones that are marked with "Shu-Osher-Form"
 * @copydoc hide_explicit_butcher_tableaus
 * @param real_type The type of the coefficients in the ShuOsherTableau
 * @ingroup time_utils
 */
template<class real_type>
struct ConvertsToShuOsherTableau
{
    using value_type = real_type;
    ///Of course a ShuOsherTableau converts to a ShuOsherTableau
    ///Useful if you constructed your very own coefficients
    ConvertsToShuOsherTableau( ShuOsherTableau<real_type> tableau): m_t(tableau){}

    /*! @brief Create ShuOsherTableau from \c dg::tableau_identifier
    *
    * The use of this constructor might be a bit awkward because you'll have to write all caps.
    * @param id the identifier, for example \c dg::SSPRK_3_3
    */
    ConvertsToShuOsherTableau( enum tableau_identifier id):m_t( dg::create::shuosher_tableau<real_type>(id)){}
    /*! @brief Create ShuOsherTableau from its name (very useful)
    *
    *  @note In some of the links in the Description below you might want to use the search function of your browser to find the indicated method
    *
    * Explicit methods
    * @copydoc hide_explicit_butcher_tableaus
    * Implicit methods
    * @copydoc hide_implicit_butcher_tableaus
    * @param name The name of the tableau as stated in the Name column above, as a string, for example "SSPRK-3-3"
    */
    ConvertsToShuOsherTableau( std::string name):m_t( dg::create::shuosher_tableau<real_type>(name)){}
    ///@copydoc ConvertsToShuOsherTableau(std::string)
    ConvertsToShuOsherTableau( const char* name):m_t( dg::create::shuosher_tableau<real_type>(std::string(name))){}
    ///Convert to ShuOsherTableau
    ///
    ///which means an object can be directly assigned to a ShuOsherTableau
    operator ShuOsherTableau<real_type>( )const{
        return m_t;
    }
    private:
    ShuOsherTableau<real_type> m_t;
};

}//namespace dg
